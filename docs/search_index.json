[
["structured-corpus.html", "Chapter 8 Structured Corpus 8.1 NCCU Spoken Mandarin", " Chapter 8 Structured Corpus library(tidyverse) library(readtext) library(tidytext) library(quanteda) There are a lot of pre-collected corpora available for lingustic studies. This chapter will demonstrate how you can load existing corpora in R and perform basic corpus analysis with these data. 8.1 NCCU Spoken Mandarin NCCU &lt;- readtext(&quot;demo_data/NCCU_SPOKEN.tar.gz&quot;) %&gt;% as_tibble NCCU_lines &lt;- NCCU %&gt;% unnest_tokens(line, text, token = function(x) str_split(x, pattern = &quot;\\n&quot;)) NCCU_lines_meta &lt;- NCCU_lines %&gt;% filter(str_detect(line, &quot;^@&quot;)) NCCU_lines_data &lt;- NCCU_lines %&gt;% filter(str_detect(line, &quot;^[^@]&quot;)) %&gt;% group_by(doc_id) %&gt;% mutate(lineID = row_number()) %&gt;% ungroup %&gt;% separate(line, into = c(&quot;SPID&quot;,&quot;line&quot;), sep=&quot;\\t&quot;) %&gt;% mutate(line2 = line %&gt;% str_replace_all(&quot;\\\\([(\\\\.)0-9]+?\\\\)&quot;,&quot; &lt;PAUSE&gt; &quot;) %&gt;% # &lt;PAUSE&gt; str_replace_all(&quot;\\\\&amp;\\\\=[a-z]+&quot;,&quot; &lt;EXTRALING&gt; &quot;) %&gt;% # &lt;EXTRALING&gt; str_replace_all(&quot;[\\u2308\\u2309\\u230a\\u230b]&quot;,&quot; &quot;) %&gt;% # overlapping talk tags str_replace_all(&quot;@[a-z:]+&quot;,&quot; &quot;) %&gt;% # code switching tags str_replace_all(&quot;\\\\s+&quot;,&quot; &quot;)) # additional whitespaces NCCU_lines_data NCCU_words &lt;- NCCU_lines_data %&gt;% unnest_tokens(word, line2, token = function(x) str_split(x, &quot;\\\\s+&quot;)) %&gt;% filter(word!=&quot;&quot;) # word frequencies NCCU_words_freq &lt;-NCCU_words %&gt;% count(word, doc_id) %&gt;% group_by(word) %&gt;% summarize(freq = sum(n), dispersion = n()) %&gt;% arrange(desc(freq), desc(dispersion)) # wordcloud require(wordcloud2) NCCU_words_freq %&gt;% filter(str_detect(word, &quot;^[^&lt;a-z]&quot;)) %&gt;% select(word, freq) %&gt;% #mutate(freq = log(freq)) %&gt;% wordcloud2::wordcloud2(minSize = 0.5, size=1, shape=&quot;diamonds&quot;) # extracting particular patterns NCCU_lines_data %&gt;% filter(str_detect(line2, &quot;覺得&quot;)) # ngrams # Generate ngram sequences from `text` # By default, `text` is assumed to have whitespaces as delimiters between tokens ngram_chi &lt;- function(text, n = 2, delimiter = &quot;_&quot;){ word_vec = strsplit(text, &quot;\\\\s&quot;) %&gt;% unlist if(length(word_vec)&gt;=n){ map2_chr(.x= 1:(length(word_vec)-n+1), .y = n:length(word_vec), .f= function(x,y) str_c(word_vec[x:y], collapse=delimiter)) }else{ return(&quot;&quot;) }#endif }#endfunc # Wrapper to Vectorize the function vngram_chi &lt;- Vectorize(ngram_chi, vectorize.args = &quot;text&quot;) NCCU_ngrams &lt;- NCCU_lines_data %&gt;% select(-line, -SPID) %&gt;% unnest_tokens(ngram, line2, token = function(x) vngram_chi(text = x, n = 5, delimiter = &quot;_&quot;)) %&gt;% filter(ngram != &quot;&quot;) # remove empty tokens (due to the short lines) NCCU_ngrams %&gt;% count(ngram, doc_id) %&gt;% group_by(ngram) %&gt;% summarize(freq = sum(n), dispersion = n()) %&gt;% arrange(desc(freq), desc(dispersion)) %&gt;% ungroup %&gt;% filter(!str_detect(ngram,&quot;&lt;&quot;)) -&gt; NCCU_ngrams_freq NCCU_ngrams_freq nchar(NCCU_ngrams_freq$ngram[1]) ## [1] 9 NCCU_ngrams_freq$ngram[1]==&quot;&quot; ## [1] FALSE "]
]
